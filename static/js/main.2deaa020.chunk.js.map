{"version":3,"sources":["utils.js","saves.js","presets.js","App.js","serviceWorker.js","index.js"],"names":["clockAddition","a","b","clockSize","getNeighbors","cellName","grid","gridSize","rowPointer","colPointer","neighborName","wrap","JSON","parse","row","column","neighbors","Set","i","j","stringify","add","countLiveNeighbors","cellNeighbors","count","forEach","has","determineNextCellState","liveNeighbors","currentCellState","makeHashGrid","lifeSeed","Array","keys","Math","random","saves","HO","presets","App","props","setGridSize","size","Number","setState","styles","adjustTableStyles","go","console","log","tickInterval","state","timerId","setInterval","iterate","prevState","running","stop","clearInterval","handleCellClick","newGrid","clonedGrid","delete","flipCell","gridTableWidth","gridTable","current","clientWidth","cellWidth","floor","width","height","componentDidMount","realGridSize","ticks","limitSize","cellsToEvaluate","abs","currentState","liveNeighborCount","getNextIteration","clearGrid","renderHashGrid","map","key","className","style","onMouseOver","mouseClicked","onClick","handleSliderChange","e","val","target","value","load","savedArray","localStorage","getItem","loadTextArea","text","top","left","validChars","result","lines","split","line","trimmed","trim","push","x","y","c","includes","convertTextToSet","textArea","save","now","Date","timeString","toLocaleDateString","toLocaleTimeString","gridString","from","savesString","setItem","renderControls","buttonList","visible","clickHandler","modalOpen","React","createRef","this","liveCells","ref","htmlFor","type","id","min","max","step","onChange","newInterval","checked","explanation","href","isOpen","ariaHideApp","_","presetName","find","slice","join","formattedText","onSubmit","preventDefault","rows","cols","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2deaa020.chunk.js","sourcesContent":["import { forEach } from 'lodash'\n\n/**\n * Add a + b where range of result is between 0 and clockSize\n */\nconst clockAddition = (a, b, clockSize) => {\n  if (a + b < 0) {\n    return a + clockSize + b\n  }\n  if (a + b > clockSize - 1) {\n    return (a + b) % clockSize\n  }\n  return a + b\n}\n\n/**\n * Get Set of neighbors for cellName\n */\nconst getNeighbors = (cellName, grid, gridSize, wrap = true) => {\n  let liveNeighborCount = 0\n  let [row, column] = JSON.parse(cellName)\n  let rowPointer, colPointer, neighborName\n  const neighbors = new Set()\n  for (let i = -1; i <= 1; i++) {\n    if (wrap) {\n      colPointer = clockAddition(column, i, gridSize)\n    } else {\n      colPointer = column + i\n    }\n    for (let j = -1; j <= 1; j++) {\n      if (wrap) {\n        rowPointer = clockAddition(row, j, gridSize)\n      } else {\n        rowPointer = row + j\n      }\n      // neighborName = `${rowPointer}-${colPointer}`\n      neighborName = JSON.stringify([rowPointer, colPointer])\n      if (neighborName !== cellName) {\n        // if (grid.has(neighborName)) {\n        //   liveNeighborCount++\n        // }\n        neighbors.add(neighborName)\n      }\n    }\n  }\n  return neighbors\n}\n\nconst countLiveNeighbors = (cellName, grid, gridSize, wrap = true) => {\n  const cellNeighbors = getNeighbors(cellName, grid, gridSize, wrap)\n  let count = 0\n  cellNeighbors.forEach((neighborName) => {\n    if (grid.has(neighborName)) {\n      count++\n    }\n  })\n  return count\n}\n\nconst getLiveNeighborCount = (cellName, grid) => {}\n\nconst determineNextCellState = (liveNeighbors, currentCellState) => {\n  if (liveNeighbors === 3) {\n    return true\n  }\n  if (liveNeighbors === 2 && currentCellState) {\n    return true\n  }\n  return false\n}\n\nconst calculateCellState = (cellName, grid, gridSize) => {\n  const liveNeighbors = countLiveNeighbors(cellName, grid, gridSize)\n  const newState = determineNextCellState(liveNeighbors, grid.has(cellName))\n  return newState\n}\n\nexport const flipCell = (cellName, grid) => {\n  const clonedGrid = new Set(grid)\n  if (grid.has(cellName)) {\n    clonedGrid.delete(cellName)\n  } else {\n    clonedGrid.add(cellName)\n  }\n  return clonedGrid\n}\n\nexport const getNextIteration = (grid, gridSize, wrap = true, limitSize = false) => {\n  const newGrid = new Set()\n  // First pass: Collect all live cells and their neighbors for evaluation\n  const cellsToEvaluate = new Set()\n  grid.forEach((cellName) => {\n    cellsToEvaluate.add(cellName)\n    const cellNeighbors = getNeighbors(cellName, grid, gridSize, wrap)\n    cellNeighbors.forEach((neighborName) => {\n      cellsToEvaluate.add(neighborName)\n    })\n  })\n  // Second pass: Evaluate cells\n  cellsToEvaluate.forEach((cellName) => {\n    let [row, column] = JSON.parse(cellName)\n    if (limitSize && (Math.abs(row) > 150 || Math.abs(column) > 150)) {\n      return\n    }\n    const currentState = grid.has(cellName)\n    const liveNeighborCount = countLiveNeighbors(cellName, grid, gridSize, wrap)\n    const newCellState = determineNextCellState(liveNeighborCount, currentState)\n    if (newCellState) {\n      newGrid.add(cellName)\n    }\n  })\n  return newGrid\n}\n\nexport const makeHashGrid = (lifeSeed, gridSize) => {\n  const grid = new Set()\n  ;[...Array(gridSize).keys()].forEach((i) => {\n    return [...Array(gridSize).keys()].forEach((j) => {\n      if (Math.random() > 1 - lifeSeed) {\n        const cellName = JSON.stringify([i, j])\n        grid.add(cellName)\n      }\n    })\n  })\n  return grid\n}\n\nexport const convertTextToSet = (text, top, left) => {\n  const validChars = ['\\n', '.', 'O']\n  const result = new Set()\n  const lines = []\n  text.split('\\n').forEach((line) => {\n    const trimmed = line.trim()\n    if (trimmed[0] === '!') {\n      return\n    }\n    lines.push(trimmed)\n  })\n  let x = left\n  let y = top\n  let cellName\n\n  lines.forEach((line) => {\n    y = y + 1\n    x = left\n    ;[...line].forEach((c) => {\n      if (!validChars.includes(c)) {\n        return\n      }\n      x = x + 1\n      switch (c) {\n        case 'O':\n          cellName = JSON.stringify([x, y])\n          result.add(cellName)\n          return\n        case '.':\n          return\n        default:\n          return\n      }\n    })\n  })\n  return result\n}\n","const saves = {\n  HO: JSON.stringify([\n    \"[9,9]\",\n    \"[10,9]\",\n    \"[11,9]\",\n    \"[12,9]\",\n    \"[13,9]\",\n    \"[11,10]\",\n    \"[11,11]\",\n    \"[9,11]\",\n    \"[10,11]\",\n    \"[12,11]\",\n    \"[13,11]\",\n    \"[9,13]\",\n    \"[9,14]\",\n    \"[9,15]\",\n    \"[10,13]\",\n    \"[11,13]\",\n    \"[12,13]\",\n    \"[13,13]\",\n    \"[13,14]\",\n    \"[13,15]\",\n    \"[12,15]\",\n    \"[11,15]\",\n    \"[10,15]\",\n  ]),\n}\n\nexport default saves\n","const presets = [\n  `!Name: Die hard\n  !A methuselah that vanishes at generation 130, which is conjectured to be maximal for patterns of 7 or fewer cells.\n  !http://www.conwaylife.com/wiki/index.php?title=Die_hard\n  ......O\n  OO\n  .O...OOO`,\n  `!Name: Bi-gun\n  !Author: Bill Gosper\n  !A true period 46 double-barreled glider gun.\n  !www.conwaylife.com/wiki/index.php?title=Bi-gun\n  ...........O\n  ..........OO\n  .........OO\n  ..........OO..OO\n  ......................................O\n  ......................................OO........OO\n  .......................................OO.......OO\n  ..........OO..OO..................OO..OO\n  OO.......OO\n  OO........OO\n  ...........O\n  ..................................OO..OO\n  .......................................OO\n  ......................................OO\n  ......................................O`,\n  `!Name: P50 traffic jam\n  !Author: Noam Elkies\n  !The smallest known period 50 oscillator; discovered on October 16, 1994\n  !http://www.conwaylife.com/wiki/index.php?title=P50_traffic_jam\n  OO............................................OO\n  O..OOO....................................OOO..O\n  .OO..............................OOO.........OO\n  ......O..................O...............O\n  ......O...O............OO.OO...O.....O...O\n  .OO.....OO.OO............O.....O.....O.......OO\n  O..OOO....O....................O.....O....OOO..O\n  OO............................................OO\n  .................................OOO\n  \n  ......O..O............................O..O\n  .....O.OO.O..........................O.OO.O\n  ......O..O............................O..O\n  ......O..O............................O..O\n  .....O.OO.O..........................O.OO.O\n  ......O..O............................O..O`,\n  `!Name: Queen bee shuttle\n  !Author: Bill Gosper\n  !A period 30 oscillator.\n  !www.conwaylife.com/wiki/index.php?title=Queen_bee_shuttle\n  .........O\n  .......O.O\n  ......O.O\n  OO...O..O...........OO\n  OO....O.O...........OO\n  .......O.O\n  .........O`,\n  `!Name: Gliders by the dozen\n  !A methuselah with lifespan 184 that emits exactly 12 gliders over the course of its evolution.\n  !www.conwaylife.com/wiki/index.php?title=Gliders_by_the_dozen\n  OO..O\n  O...O\n  O..OO`,\n  `!Name: Queen bee\n!A pattern that lays a beehive on either side of itself before exploding.\n!www.conwaylife.com/wiki/index.php?title=Queen_bee\n...O\n..O.O\n.O...O\n..OOO\nOO...OO`,\n]\n\nexport default presets\n","import React from 'react'\nimport './styles/main.scss'\nimport { getNextIteration, makeHashGrid, flipCell, convertTextToSet } from './utils'\nimport saves from './saves'\nimport presets from './presets'\nimport _ from 'lodash'\nimport Modal from 'react-modal'\n\nconst defaultText = `........................O\n......................O.O\n............OO......OO............OO\n...........O...O....OO............OO\nOO........O.....O...OO\nOO........O...O.OO....O.O\n..........O.....O.......O\n...........O...O\n............OO`\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.gridTable = React.createRef()\n    this.state = {\n      gridSize: 60,\n      lifeSeed: 0.2,\n      grid: new Set(),\n      ticks: 0,\n      running: false,\n      tickInterval: 210,\n      mouseClicked: false,\n      wrap: false,\n      textArea: defaultText,\n      modalOpen: false,\n    }\n  }\n\n  setGridSize = (size) => {\n    const gridSize = Number(size)\n    this.setState({\n      gridSize,\n    })\n    this.styles = this.adjustTableStyles(gridSize)\n  }\n\n  go = () => {\n    console.log('go clicked')\n    const { tickInterval } = this.state\n    this.timerId = setInterval(this.iterate, 570 - tickInterval)\n    this.setState((prevState) => ({\n      running: !prevState.running,\n    }))\n  }\n\n  stop = () => {\n    clearInterval(this.timerId)\n    this.setState((prevState) => ({\n      running: !prevState.running,\n    }))\n  }\n\n  handleCellClick = (cellName) => {\n    const { grid, running } = this.state\n    if (!running) {\n      const newGrid = flipCell(cellName, grid)\n      console.log(newGrid)\n      this.setState({\n        grid: newGrid,\n      })\n    }\n  }\n\n  adjustTableStyles = (gridSize) => {\n    const gridTableWidth = this.gridTable.current.clientWidth\n    const cellWidth =\n      gridTableWidth > 800\n        ? Math.floor(800 / gridSize) - 2\n        : Math.floor(gridTableWidth / gridSize) - 2\n    return {\n      width: cellWidth,\n      height: cellWidth,\n    }\n  }\n\n  componentDidMount = () => {\n    const { gridSize, lifeSeed } = this.state\n    const gridTableWidth = this.gridTable.current.clientWidth\n    let realGridSize = gridSize\n    console.log(gridTableWidth)\n    if (gridTableWidth < 500) {\n      realGridSize = 38\n    }\n    this.styles = this.adjustTableStyles(realGridSize)\n    this.setState({\n      grid: makeHashGrid(lifeSeed, realGridSize),\n      gridSize: realGridSize,\n    })\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId)\n  }\n\n  iterate = () => {\n    const updater = (state) => {\n      const { grid, gridSize, ticks, wrap } = state\n      const nextGrid = getNextIteration(grid, gridSize, wrap, true)\n      return {\n        grid: nextGrid,\n        ticks: ticks + 1,\n      }\n    }\n    this.setState(updater)\n  }\n\n  clearGrid = () => {\n    const grid = new Set()\n    this.setState({\n      grid,\n      ticks: 0,\n    })\n  }\n\n  renderHashGrid = () => {\n    const { gridSize, grid } = this.state\n    return (\n      <table>\n        <tbody>\n          {[...Array(gridSize).keys()].map((i) => {\n            return (\n              <tr key={`row-${i}`} className=\"grid-row\">\n                {[...Array(gridSize).keys()].map((j) => {\n                  const cellName = JSON.stringify([j, i])\n                  return (\n                    <td\n                      style={this.styles}\n                      onMouseOver={() => {\n                        if (this.state.mouseClicked) {\n                          this.handleCellClick(cellName)\n                        }\n                      }}\n                      onClick={() => {\n                        this.handleCellClick(cellName)\n                      }}\n                      key={`cell-${cellName}`}\n                      className={`cell`}\n                    >\n                      <div className={grid.has(cellName) ? 'live' : ''}></div>\n                    </td>\n                  )\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    )\n  }\n\n  handleSliderChange = (e) => {\n    const { running, gridSize } = this.state\n    if (running) {\n      return\n    }\n    const val = Number(e.target.value) / 100\n    this.setState({\n      lifeSeed: val,\n      grid: makeHashGrid(val, gridSize),\n      ticks: 0,\n    })\n  }\n\n  load = (key) => {\n    let savedArray\n    if (key === 'default') {\n      savedArray = JSON.parse(localStorage.getItem('save') || '[]')\n    } else {\n      savedArray = JSON.parse(saves[key])\n    }\n    const grid = new Set(savedArray)\n    this.setState({\n      grid,\n      ticks: 0,\n    })\n  }\n\n  loadTextArea = () => {\n    const newGrid = convertTextToSet(this.state.textArea, 20, 10)\n    this.setState({\n      grid: newGrid,\n      ticks: 0,\n    })\n  }\n\n  save = () => {\n    const { grid } = this.state\n    const save = JSON.parse(localStorage.getItem('save') || '[]')\n    const saves = JSON.parse(localStorage.getItem('saves') || '{}')\n    const now = new Date()\n    const timeString = `${now.toLocaleDateString()} ${now.toLocaleTimeString()}`\n    const gridString = JSON.stringify(Array.from(grid))\n    saves[timeString] = [...grid]\n    const savesString = JSON.stringify(saves)\n    console.log(savesString)\n    localStorage.setItem('save', gridString)\n    // localStorage.setItem('saves', saves)\n  }\n\n  renderControls = () => {\n    const { running, lifeSeed, gridSize } = this.state\n    const buttonList = [\n      {\n        text: 'GO!',\n        visible: !running,\n        clickHandler: () => {\n          this.save()\n          this.go()\n        },\n      },\n      {\n        text: 'Next',\n        visible: !running,\n        clickHandler: () => {\n          this.iterate()\n        },\n      },\n      {\n        text: 'STOP!',\n        visible: running,\n        clickHandler: () => {\n          this.stop()\n        },\n      },\n      {\n        text: 'Clear',\n        visible: !running,\n        clickHandler: () => {\n          this.clearGrid()\n        },\n      },\n      {\n        text: 'Random',\n        visible: !running,\n        clickHandler: () => {\n          this.setState({\n            grid: makeHashGrid(lifeSeed, gridSize),\n            ticks: 0,\n          })\n        },\n      },\n      // {\n      //   text: 'Save',\n      //   visible: !running,\n      //   clickHandler: () => {\n      //     this.save()\n      //   },\n      // },\n      {\n        text: 'Restore',\n        visible: !running,\n        clickHandler: () => {\n          this.load('default')\n        },\n      },\n      {\n        text: 'Preset',\n        visible: !running,\n        clickHandler: () => {\n          this.load('HO')\n        },\n      },\n      {\n        text: 'More',\n        visible: !running,\n        clickHandler: () => {\n          this.setState({ modalOpen: true })\n        },\n      },\n    ]\n    return (\n      <div className=\"col-lg-2 mb-3 mb-lg-0\">\n        {buttonList.map((b, i) => {\n          return (\n            <button\n              key={`control-${i}`}\n              className={`btn btn-primary col-3 col-md-2 col-lg-8 ${b.visible ? '' : 'd-none'}`}\n              onClick={b.clickHandler}\n            >\n              {b.text}\n            </button>\n          )\n        })}\n      </div>\n    )\n  }\n\n  render() {\n    const { grid, gridSize, lifeSeed, ticks, running, tickInterval } = this.state\n    const liveCells = grid.size\n    return (\n      <>\n        <div className=\"container\">\n          <h1>Conway's Game of Life</h1>\n          <div className=\"row\">\n            <div className=\"col\">\n              <p>Iterations: {ticks}</p>\n            </div>\n            <div className=\"col\">\n              <p>Live cells: {liveCells}</p>\n            </div>\n          </div>\n          <div className=\"row mb-3\">\n            {this.renderControls()}\n            <div className=\"col-lg-10\" ref={this.gridTable}>\n              {this.renderHashGrid(grid)}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-8\">\n              {!running ? (\n                <div>\n                  <div className=\"form-check\">\n                    <input\n                      onChange={() => {\n                        this.setState((prevState) => ({ wrap: !prevState.wrap }))\n                      }}\n                      className=\"form-check-input\"\n                      checked={this.state.wrap}\n                      type=\"checkbox\"\n                      id=\"defaultCheck1\"\n                    />\n\n                    <label className=\"form-check-label\" htmlFor=\"defaultCheck1\">\n                      Round world?\n                    </label>\n                  </div>\n\n                  <div>\n                    <label className=\"mr-3\" htmlFor=\"densityRange\">\n                      Initial Density\n                    </label>\n                    <input\n                      type=\"range\"\n                      min=\"1\"\n                      max=\"50\"\n                      value={lifeSeed * 100}\n                      className=\"custom-range\"\n                      onChange={this.handleSliderChange}\n                      id=\"densityRange\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"mr-3\" htmlFor=\"grid-size\">\n                      Grid Size\n                    </label>\n                    <input\n                      id=\"grid-size\"\n                      type=\"number\"\n                      min=\"10\"\n                      max=\"50\"\n                      value={this.state.gridSize}\n                      onChange={(e) => {\n                        this.setGridSize(e.target.value)\n                      }}\n                    />\n                  </div>\n                </div>\n              ) : (\n                <div>\n                  <label className=\"mr-3\" htmlFor=\"customRange1\">\n                    Slower/Faster\n                  </label>\n                  <input\n                    type=\"range\"\n                    className=\"custom-range\"\n                    id=\"customRange1\"\n                    min=\"18\"\n                    max=\"71\"\n                    step=\"6\"\n                    value={tickInterval / 10}\n                    onChange={(e) => {\n                      const newInterval = Number(e.target.value) * 10\n                      clearInterval(this.timerId)\n                      this.timerId = setInterval(this.iterate, 570 - newInterval)\n                      this.setState({\n                        tickInterval: newInterval,\n                      })\n                    }}\n                  ></input>\n                </div>\n              )}\n            </div>\n          </div>\n          <hr />\n          <div className=\"row\">\n            <div className={`explanation ${this.state.explanation} ? 'show' : ''`}>\n              <p className=\"pl-3\">\n                <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">Wikipedia</a>\n              </p>\n              <ul>\n                <li>Each cell has 8 neighboring cells</li>\n                <li>A live cell with 2 or 3 live neighbors will continue to the next iteration</li>\n                <li>A dead cell with exactly 3 live neighbors will come to life</li>\n                <li>A live cell with 4 or more live neighbors will die, as if by overpopulation</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n        <Modal isOpen={this.state.modalOpen} ariaHideApp={false}>\n          <div className=\"container\">\n            <h2>Preset Patterns</h2>\n            <div className=\"row\">\n              <ul>\n                {_.map(presets, (value, key) => {\n                  const lines = value.split('\\n').map((line) => line.trim())\n                  const nameLine = _.find(lines, (line) => line.includes('!Name:'))\n                  const presetName = nameLine.split(' ').slice(1).join(' ')\n                  return (\n                    <li\n                      onClick={() => {\n                        const formattedText = lines.join('\\n')\n                        this.setState({\n                          textArea: formattedText,\n                        })\n                      }}\n                      key={`preset-${key}`}\n                    >\n                      <a href=\"#\">{presetName}</a>\n                    </li>\n                  )\n                })}\n              </ul>\n            </div>\n            <div className=\"row\">\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault()\n                  this.setState({\n                    modalOpen: false,\n                  })\n                  this.loadTextArea()\n                }}\n              >\n                <div className=\"form-group\">\n                  <textarea\n                    rows=\"30\"\n                    cols=\"90\"\n                    value={this.state.textArea}\n                    onChange={(e) => {\n                      this.setState({ textArea: e.target.value })\n                    }}\n                  ></textarea>\n                </div>\n                <div className=\"form-group\">\n                  <button className=\"btn btn-primary\" type=\"submit\">\n                    Load\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}